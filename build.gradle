buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
    }
}

version "0.1"
group "waterquality"



apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile 'org.webjars.bower:adminlte:2.3.11'
    runtime 'org.grails.plugins:grails-console:2.1.1'
    compile 'org.grails.plugins:spring-security-core:3.2.0'
    compile 'org.webjars:font-awesome:4.7.0'
    compile 'org.webjars:ionicons:2.0.1'
    compile 'org.webjars:jquery:3.2.1'
    compile 'org.webjars:bootstrap:3.3.7'
    compile 'org.webjars:AdminLTE:2.4.0'

    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'

    //base de datos mysql.
    runtime 'mysql:mysql-connector-java:5.1.34'

    //Apache ActiveMQ
    // https://mvnrepository.com/artifact/org.apache.activemq/activemq-client
    compile group: 'org.apache.activemq', name: 'activemq-client', version: '5.15.1'
//    compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.13'
    // https://mvnrepository.com/artifact/nz.ac.waikato.cms.weka/weka-dev
    compile group: 'nz.ac.waikato.cms.weka', name: 'weka-dev', version: '3.7.9'

    // https://mvnrepository.com/artifact/nz.ac.waikato.cms.weka/optics_dbScan
    compile group: 'nz.ac.waikato.cms.weka', name: 'optics_dbScan', version: '1.0.2'


    compile 'com.google.code.gson:gson:2.6.2'

    compile "com.sparkpost:sparkpost-lib:0.19"
    compile 'org.openweathermap.java-api:api-core:1.0'
    // https://mvnrepository.com/artifact/com.github.fedy2/yahoo-weather-java-api
    compile group: 'com.github.fedy2', name: 'yahoo-weather-java-api', version: '1.2.0'
    // https://mvnrepository.com/artifact/com.mashape.unirest/unirest-java
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.3.1'
    // https://mvnrepository.com/artifact/de.lmu.ifi.dbs.elki/elki-tutorial
    compile group: 'de.lmu.ifi.dbs.elki', name: 'elki-tutorial', version: '0.7.0'

// https://mvnrepository.com/artifact/org.apache.spark/spark-mllib
//    provided group: 'org.apache.spark', name: 'spark-mllib_2.11', version: '2.2.0'


}



bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

assets {
    minifyJs = true
    minifyCss = true
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task stage() {
    dependsOn clean, war
}
tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.war")
}
war.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.compile) {
        include "webapp-runner*"
    }
}

stage.dependsOn(copyToLib)


